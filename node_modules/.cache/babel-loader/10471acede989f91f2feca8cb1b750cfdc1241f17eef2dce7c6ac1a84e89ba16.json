{"ast":null,"code":"var _jsxFileName = \"/Users/macm1/Documents/JobSkill-App/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    const response = await axios.get('http://localhost:5000/users');\n    const users = response.data;\n    const foundUser = users.find(u => u.email === email);\n    if (!foundUser) throw new Error('User not found');\n    if (foundUser.attempts >= 3) throw new Error('Account locked. Please reset your password.');\n    if (foundUser.password !== password) {\n      foundUser.attempts += 1;\n      await axios.put(`http://localhost:5000/users/${foundUser.id}`, foundUser);\n      throw new Error('Incorrect password');\n    }\n    foundUser.attempts = 0;\n    await axios.put(`http://localhost:5000/users/${foundUser.id}`, foundUser);\n    setUser(foundUser);\n    localStorage.setItem('user', JSON.stringify(foundUser));\n    return foundUser;\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const resetPassword = async email => {\n    const response = await axios.get('http://localhost:5000/users');\n    const users = response.data;\n    const foundUser = users.find(u => u.email === email);\n    if (!foundUser) throw new Error('User not found');\n    foundUser.attempts = 0;\n    await axios.put(`http://localhost:5000/users/${foundUser.id}`, foundUser);\n    // In a real app, send an email with a reset link\n    alert('Password reset link sent to your email.');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      resetPassword,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","response","get","users","data","foundUser","find","u","Error","attempts","put","id","setItem","stringify","logout","removeItem","resetPassword","alert","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macm1/Documents/JobSkill-App/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    const response = await axios.get('http://localhost:5000/users');\n    const users = response.data;\n    const foundUser = users.find(u => u.email === email);\n\n    if (!foundUser) throw new Error('User not found');\n    if (foundUser.attempts >= 3) throw new Error('Account locked. Please reset your password.');\n\n    if (foundUser.password !== password) {\n      foundUser.attempts += 1;\n      await axios.put(`http://localhost:5000/users/${foundUser.id}`, foundUser);\n      throw new Error('Incorrect password');\n    }\n\n    foundUser.attempts = 0;\n    await axios.put(`http://localhost:5000/users/${foundUser.id}`, foundUser);\n    setUser(foundUser);\n    localStorage.setItem('user', JSON.stringify(foundUser));\n    return foundUser;\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const resetPassword = async (email) => {\n    const response = await axios.get('http://localhost:5000/users');\n    const users = response.data;\n    const foundUser = users.find(u => u.email === email);\n\n    if (!foundUser) throw new Error('User not found');\n    foundUser.attempts = 0;\n    await axios.put(`http://localhost:5000/users/${foundUser.id}`, foundUser);\n    // In a real app, send an email with a reset link\n    alert('Password reset link sent to your email.');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, resetPassword, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}